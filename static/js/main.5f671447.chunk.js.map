{"version":3,"sources":["app/logo.svg","containers lazy /^/.*/index$/ groupOptions: {} namespace object","utils/history.js","utils/loadable.js","app/Loadable.js","app/App.js","serviceWorker.js","index.js","configureStore.js","reducers.js"],"names":["module","exports","__webpack_require__","p","map","./HomePage/index","webpackAsyncContext","req","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","history","createBrowserHistory","basename","loadable","importFunc","_ref$fallback","arguments","length","undefined","fallback","LazyComponent","lazy","props","react_default","a","createElement","react","Loadable","page","concat","App","className","src","logo","alt","href","target","rel","react_router_dom","react_router","path","process","exact","component","Boolean","window","location","hostname","match","store","initialState","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","apply","createStore","injectedReducers","combineReducers","objectSpread","router","connectRouter","createReducer","runSaga","run","injectedSagas","configureStore","MOUNT_NODE","document","getElementById","ReactDOM","render","es","esm","app_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f671447.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./HomePage/index\": [\n\t\t42,\n\t\t3,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 39;\nmodule.exports = webpackAsyncContext;","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory({\n  basename: '/portfolio-website',\n});\nexport default history;\n","import React, { lazy, Suspense } from 'react';\n\nconst loadable = (importFunc, { fallback = null } = { fallback: null }) => {\n  const LazyComponent = lazy(importFunc);\n  return props => (\n    <Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\nexport default loadable;\n","/**\n * Asynchronously loads the container page\n */\n\nimport React from 'react';\nimport loadable from '../utils/loadable';\n\nexport default page =>\n    loadable(\n        () => {\n            return import(`../containers/${page}/index`);\n        },\n        {\n            fallback: <div>Loading..</div>,\n        }\n    );\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport loadable from \"./Loadable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </div>\n      <Router>\n        <Switch>\n          <Route\n            path={process.env.PUBLIC_URL + \"/\"}\n            exact\n            component={loadable(\"HomePage\")}\n          />\n          {/* <Route path=\"/about\" component={loadable(\"AboutPage\")} /> */}\n          {/* <Route path=\"/features\" component={loadable(\"FeaturePage\")} /> */}\n          {/* <Route component={loadable(\"NotFoundPage\")} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport history from \"./utils/history\";\n\n// Import root app\nimport App from \"./app/App\";\n\nimport configureStore from \"./configureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById(\"root\");\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>,\n    MOUNT_NODE\n  );\n};\n\nrender();\n\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport history from './utils/history';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n"],"sourceRoot":""}